@page "/certifications/viewcertifications"
@using IncomeGoalTracker.Core.Models.Ceu
@using IncomeGoalTracker.Core.Services.Interfaces
@inject ICertificateService CertificateService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject ILogger<Certificate> Logger 

<PageTitle>Certificates</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Certificates</MudText>
<MudText Class="mb-8">Manage your professional certificates and track your CEU progress</MudText>

<MudPaper Class="pa-4 mb-4">
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" 
                       OnClick="@(() => NavigateToCreate())">Add Certificate</MudButton>
        </MudItem>
        <MudItem xs="12" md="6" Class="d-flex justify-end">
            
        </MudItem>
    </MudGrid>
</MudPaper>

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    <MudText>Loading certificates...</MudText>
}
else if (_error)
{
    <MudAlert Severity="Severity.Error" Class="mb-4">
        @_errorMessage
        <MudButton Color="Color.Primary" Variant="Variant.Text" OnClick="@(async () => await LoadCertificatesAsync())">Retry</MudButton>
    </MudAlert>
}
else if (_certificates == null || !_certificates.Any())
{
    <MudAlert Severity="Severity.Info" Class="mb-4">
        No certificates found. Add your first certificate to get started!
    </MudAlert>
}
else
{
    <MudTable Items="@_certificates" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Abbreviation</MudTh>
            <MudTh>Due Date</MudTh>
            <MudTh>CEUs Required</MudTh>
            <MudTh>CEUs Earned</MudTh>
            <MudTh>Progress</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Abbreviation">@context.Abbreviation</MudTd>
            <MudTd DataLabel="Due Date">@context.CeuDueDate.ToString("MM/dd/yyyy")</MudTd>
            <MudTd DataLabel="CEUs Required">@context.CeusRequired</MudTd>
            <MudTd DataLabel="CEUs Earned">@context.CeusEarned</MudTd>
            <MudTd DataLabel="Progress">
                <MudProgressLinear Value="@CalculateProgressPercentage(context)" Color="@GetProgressColor(context)" Class="my-1">
                    <MudText Typo="Typo.body2">@($"{CalculateProgressPercentage(context):F0}%")</MudText>
                </MudProgressLinear>
            </MudTd>
            <MudTd DataLabel="Status">

            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Primary" Size="Size.Small"
                              OnClick="@(() => ViewCertificate(context))" Title="View" />
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small"
                              OnClick="@(() => EditCertificate(context))" Title="Edit" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                              OnClick="@(() => DeleteCertificateAsync(context))" Title="Delete" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private bool _loading = true;
    private bool _error = false;
    private string _errorMessage = "";
    private IEnumerable<CertificateView> _certificates = new List<CertificateView>();
    private bool _showActive = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCertificatesAsync();
    }

    private async Task LoadCertificatesAsync()
    {
        try
        {
            _loading = true;
            _error = false;
            
            Logger.LogInformation("Loading certificates");
            
            if (_showActive)
            {
                _certificates = await CertificateService.GetActiveCertificatesAsync();
            }
            else
            {
                _certificates = await CertificateService.GetAllCertificatesAsync();
            }
            
            Logger.LogInformation("Loaded {Count} certificates", _certificates.Count());
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = "Error loading certificates: " + ex.Message;
            Logger.LogError(ex, "Error loading certificates");
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private double CalculateProgressPercentage(CertificateView certificate)
    {
        if (certificate.CeusRequired <= 0)
            return 0;

        double percentage = (certificate.CeusEarned / certificate.CeusRequired) * 100;
        return Math.Min(percentage, 100); // Cap at 100%
    }

    private Color GetProgressColor(CertificateView certificate)
    {
        double percentage = CalculateProgressPercentage(certificate);
        
        if (percentage >= 100)
            return Color.Success;
        if (percentage >= 66)
            return Color.Info;
        if (percentage >= 33)
            return Color.Warning;
        return Color.Error;
    }
    
    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/certificates/create");
    }

    private void ViewCertificate(CertificateView certificate)
    {
        NavigationManager.NavigateTo($"/certificates/{certificate.Id}");
    }

    private void EditCertificate(CertificateView certificate)
    {
        NavigationManager.NavigateTo($"/certificates/{certificate.Id}/edit");
    }

    private async Task DeleteCertificateAsync(CertificateView certificate)
    {
        bool confirmed = await DialogService.ShowMessageBox(
            "Confirm Delete",
            $"Are you sure you want to delete the certificate '{certificate.Name}'? This action cannot be undone.",
            "Delete",
            "Cancel"
        ) ?? false;
        
        if (confirmed)
        {
            try
            {
                Logger.LogInformation("Deleting certificate: {CertificateId}", certificate.Id);
                
                bool success = await CertificateService.DeleteCertificateAsync(certificate.Id);
                
                if (success)
                {
                    Snackbar.Add($"Certificate '{certificate.Name}' deleted successfully", Severity.Success);
                    await LoadCertificatesAsync(); // Reload the list
                }
                else
                {
                    Snackbar.Add("Failed to delete certificate", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting certificate: {CertificateId}", certificate.Id);
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }
}